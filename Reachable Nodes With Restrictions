
1. Using Ordered_set
class Solution {
    
    int Dfs(int i,int prev,unordered_map<int,list<int>>&adj,set<int>& res)
    {
         if(res.find(i)!=res.end())
              return 0;
        int ans=1;
        for(auto x:adj[i])
        {
             if(x!=prev)
                 ans+=Dfs(x,i,adj,res);
        } 
        return ans;
    }
public:
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        unordered_map<int,list<int>>adj;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
          set<int> res;
        for(auto x:restricted)
            res.insert(x);
        return Dfs(0,-1,adj,res);
    }
};
2. Using Unordered_set due to its Complexity

class Solution {
    
    int Dfs(int i,int prev,unordered_map<int,list<int>>&adj,unordered_set<int>& res)
    {
         if(res.find(i)!=res.end())
              return 0;
        int ans=1;
        for(auto x:adj[i])
        {
             if(x!=prev)
                 ans+=Dfs(x,i,adj,res);
        } 
        return ans;
    }
public:
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        unordered_map<int,list<int>>adj;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
          unordered_set<int>res;
        for(auto x:restricted)
            res.insert(x);
        return Dfs(0,-1,adj,res);
    }
};
